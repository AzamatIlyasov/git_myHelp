#ссылки которыми пользовался
# https://habrahabr.ru/post/273897/
# http://simple-training.com/git-vcs/git-install/

# инициализация и конфигурация
git init
git config --global user.name "имя пользователя"
git config --global user.email почта@gmail.com
git config --list

# Как сделать так чтобы Git использовал другой текстовый редактор 
git config --global core.editor "'C:\Program Files\Sublime Text 3\sublime_text.exe' -multiInst -notabbar -nosession -noPlugin"

# какой утилитой (надо будет скачать) будем решать конфликты при слеянии - merge
git config --global merge.tool kdiff3
git config --global mergetool.kdiff3.cmd '"C:\\Program Files\\KDiff3\\kdiff3" $BASE $LOCAL $REMOTE -o $MERGED'
git config --global mergetool.kdiff3.cmd '"C:\\Program Files (x86)\\Meld\\Meld.exe" $BASE $LOCAL $REMOTE -o $MERGED'

# необходимо создать файл .gitignore для файлов которые будут игнорироваться (всякий мусор)

#нужно добавить файлы перед коммитом
git add .

# Если вы сделали что-то не так, запутались, не знаете, что происходит — эти две команды вам помогут.
# проверка статуса git
git status
# графическая утилита, которая показывает наш граф. В качестве ключей передаём имена веток или --all, чтобы показать все.
gitk

# инициализация проекта (всех файлов) - добавления всех файлов
git commit -a -m"init"

# untracked files - файлы которые не под контролем Git
git status --untracked-files-all

# предположим что один или более файлов мы забыли
# поместить в список игнорируемых и сейчас нам надо убрать их из под надзора Git.
git rm --cached <имя файла>

# добавим неотслеживаемый файл в индекс
git add LICENSE.php

# Делаем коммит:
git commit -m"add files"

# Можно выполнить индексацию/добавление по маске:
# Как вы понимаете после этой команды в индекс попадат все файлы с расширением php.
git add "*.php"

# для возврата в состояние которая зафиксировалась в GIT
git checkout -- LICENSE.php

# проверка изменения
git log

# проверка изменения с не определенным форматом вывода
git log --pretty=format:"%h - %an, %ar : %s"

# коммиты за последние 2 недели
git log --since=2.weeks

# какие изменения в последнем 2 (двух) коммитах
git log -p -2 

# создание ветки
git checkout -n new_f #создаем и сразу переключаемся
git branch new_f2 

# переход на другую ветку
git checkout new_f2

# какие ветки есть
git branch
git branch -v # какие коммиты последние

# слеяние, для безопасного слеяния необходимо сначало все это проделать в другой ветке
git checkout new_f #переключаемся в ветку new_f
git merge 


#github.com - инициализация и ssh keys (нашел в help https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/)
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter] #в данной папке будет сформирована ключ, который будет нужно вставить в специальное поле в github.com
Enter passphrase (empty for no passphrase): [Type a passphrase] #ключевая фраза - типа пароля для push в github.com
Enter same passphrase again: [Type passphrase again]


#github.com push 
git remote add origin git@github.com:AzamatIlyasov/<repository name from GitHub>
git push -u origin master

#скопировать из github.com
git clone https://github.com/myuser/project.git <myfolder>

#что-то (Загрузка локальных изменений в удаленный репозиторий)
#(The current branch _____ has no upstream branch.
#To push the current branch and set the remote as upstream, use
#git push --set-upstream origin _______)
git push --set-upstream origin ______

#подгрузить изменения ИЗ GitHub
git pull



